cmake_minimum_required(VERSION 3.21 FATAL_ERROR)
project(
  message-package_project
  VERSION 1.2.0
  LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# just set it to test purposes. Do not set it  leave it to user default is /usr/
set(CMAKE_INSTALL_PREFIX "/home/salim/repos/cpp_sandbox/cmake_learn/temp/")
message("CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}")

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE
      RelWithDeb
      CACHE STRING "Build type" FORCE)
endif()

include_guard(GLOBAL)

# build subdirectories
include(GNUInstallDirs)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

# install subdirectories ; CMAKE_INSTALL_PREFIX will be prepended
set(INSTALL_LIBDIR
    ${CMAKE_INSTALL_LIBDIR}
    CACHE PATH "Install directory for libraries")
set(INSTALL_BINDIR
    ${CMAKE_INSTALL_BINDIR}
    CACHE PATH "Install directory for binaries")
set(INSTALL_INCLUDEDIR
    ${CMAKE_INSTALL_INCLUDEDIR}
    CACHE PATH "Install directory for header files")

# install subdirectories for cmake files(generated by cmake)
if(WIN32 AND NOT CYGWIN)
  set(DEF_INSTALL_CMAKEDIR CMake)
else()
  set(DEF_INSTALL_CMAKEDIR share/cmake/${PROJECT_NAME})
endif()

set(INSTALL_CMAKEDIR
    ${DEF_INSTALL_CMAKEDIR}
    CACHE PATH "Installation directory for CMake files")

# Report to user install directories
foreach(p LIB BIN INCLUDE CMAKE)
  file(TO_NATIVE_PATH ${CMAKE_INSTALL_PREFIX}/${INSTALL_${p}DIR} _path)
  message(STATUS "Installing ${p} components to ${_path}")
  unset(_path)
endforeach()

option(ENABLE_DOXYGEN "Generate Doxygen Docs for project" OFF)

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

# if(ENABLE_DOXYGEN) include(UseDoxygenDoc) endif()

set(GIT_SHA
    "Unknown"
    CACHE STRING "SHA this build was generated from")
string(SUBSTRING "${GIT_SHA}" 0 8 GIT_SHORT_SHA)

# add_custom_command( OUTPUT
# ${CMAKE_CURRENT_BINARY_DIR}/${INSTALL_INCLUDEDIR}/version.hpp COMMAND
# ${CMAKE_COMMAND} -D
# TARGET_DIR=${CMAKE_CURRENT_BINARY_DIR}/${INSTALL_INCLUDEDIR} -D
# PROGRAM_VERSION=${PROJECT_VERSION} -D
# PROGRAM_VERSION_MAJOR=${PROJECT_VERSION_MAJOR} -D
# PROGRAM_VERSION_MINOR=${PROJECT_VERSION_MINOR} -D
# PROGRAM_VERSION_PATCH=${PROJECT_VERSION_PATCH} -D
# PROGRAM_VERSION_TWEAK=${PROJECT_VERSION_TWEAK} -D PROGRAM_NAME=${PROJECT_NAME}
# -P ${PROJECT_SOURCE_DIR}/cmake/git-hash.cmake WORKING_DIRECTORY
# ${CMAKE_CURRENT_SOURCE_DIR})

# add_custom_target(get_git_hash ALL DEPENDS
# ${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/version.hpp)

# project version generated in config.hpp
add_subdirectory(configured)

add_subdirectory(src)

add_dependencies(hello_world_wDSO2 get_git_hash)

enable_testing()

add_subdirectory(tests)

include(CMakeCPack.cmake)

# this is the older way of generating doxygen Doxyfile.in prefer the
# doxygenSetup

# add_doxygen_doc( BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/_build DOXY_FILE
# ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in TARGET_NAME docs COMMENT "HTML
# Documentation")

if(ENABLE_DOXYGEN)
  include(doxygenSetup)

  # input directory and output directory for doxygen

  generate_doxygen("${CMAKE_CURRENT_LIST_DIR}/include;
${CMAKE_CURRENT_LIST_DIR}/src" "${CMAKE_CURRENT_LIST_DIR}/docs/doxygen") #

  # option to generate docs every build time; not recommended; it will slow down
  # build time

  # add_dependencies(hello_world_wAR2 doxygen)
endif()
